name: Deploy to Production

on:
  push:
    branches:
      - main

# The name of the `Build (ubuntu 20.04, 1.8)` build is used as a required context inside the repository on protected
#  branches configuration. Any changes to the OS or Java version will need to be reflected in repository settings.

jobs:
  build:
    name: Build, Test and Package
    runs-on: ubuntu-20.04

    # We need to share details across job boundaries, expose the step outs at the job level
    outputs:
      container_image_tag: ${{ steps.maven_build.outputs.container_deployment_registry_tag }}
      container_registry_url: ${{ steps.maven_build.outputs.container_registry }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # Utilize caching of the resolved plugins and dependencies from previous Maven builds to provide
      # faster builds when dependencies have not changed.
      - name: Cache Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          # Hash on the POM file as that would need to change to modify the dependencies or plugins in use
          key: ${{ runner.os }}-mvn-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-mvn

      - name: Define Build Parameters
        id: build_params
        uses: actions/github-script@v3
        with:
          script: |
            const scriptPath = require('path').resolve('./.github/workflows/scripts/build_parameters.js')
              , buildParameters = require(scriptPath);
            ;
            buildParameters(context, core).injectBuildParameters();

      - name: Build Test and Package
        id: maven_build
        run: |
          mvn package -B \
            -Dsha1="${{ steps.build_params.outputs.maven_sha1 }}" \
            -Dchangelist="${{ steps.build_params.outputs.maven_changelist }}" \
            -Dgithub.repository="${{ steps.build_params.outputs.github_repository }}" \
            -Dcontainer.image.name="${{ steps.build_params.outputs.github_repository_name }}"
       
      - name: GHPR Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.repository_owner }}
          password: ${{ secrets.OCTODEMO_OCTODEMOBOT_GITHUB_REPO_AND_PACKAGES_TOKEN }}
          
      - name: Publish Docker image
        id: container_publish
        run: |
          docker push ${{ steps.maven_build.outputs.container_deployment_registry_tag }}
          
      - name: Publish Container as a Status
        id: container_image_status
        uses: Sibz/github-status-action@v1
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          state: success
          context: Container Image Published
          description: ${{ steps.maven_build.outputs.container_deployment_registry_tag }} ${{ steps.maven_build.outputs.container_registry }}

  deploy:
    name: Create Deployment
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - name: Get temporary token for creating deployment
        id: temp_token
        uses: peter-murray/workflow-application-token-action@v1
        with:
          application_id: ${{ secrets.OCTODEMOBOT_APPLICATION_ID_REPO_AUTOMATION }}
          application_private_key: ${{ secrets.OCTODEMOBOT_APPLICATION_KEY_REPO_AUTOMATION }}
        
      - name: Create Deployment
        id: create_deployment
        uses: actions/github-script@v3
        env:
          container_registry_url: ${{ needs.build.outputs.container_registry_url }}
          container_image: ${{ needs.build.outputs.container_image_tag }}
        with:
          github-token: ${{ steps.temp_token.outputs.token }}
          script: |
            const environment = 'prod'
              , isProduction = true
              , deploymentPayload = {
                  container_registry: process.env.container_registry_url,
                  container_image: process.env.container_image,
                  environment: environment,
                  ref: context.ref,
                }
              ;

            await github.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              auto_merge: false,
              required_contexts: [],
              payload: JSON.stringify(deploymentPayload),
              environment: environment,
              description: `Deploy Pull Request to ${environment}`,
              transient_environment: !isProduction,
              production_environment: isProduction,
              mediaType: { previews: ["flash-preview", "ant-man"] }
            });
